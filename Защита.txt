app = Flask(__name__) - код создает объект приложения как экземпляр класса Flask, импортированный из пакета flask. Переменная __name__ , передаваемая классу Flask, является предопределенной переменной Python, которой присваивается имя модуля, в котором она используется. Flask использует местоположение переданного здесь модуля в качестве отправной точки, когда ему нужно загрузить связанные ресурсы, такие как файлы шаблонов, о которых я расскажу в главе 2. Для всех практических целей передача __name__ почти всегда приводит к правильной настройке Flask. Переменная app определена как экземпляр класса Flask в коде init.py, что делает ее переменной пакета app

from (корневая директория)app import routes, models - Нижний импорт - это хорошо известное решение, позволяющее избежать циклического импорта, распространенной проблемы с приложениями Flask. Вы увидите, что модулю routes необходимо импортировать переменную app, определенную в этом файле, поэтому размещение одного из взаимных импортов внизу позволяет избежать ошибки, возникающей в результате взаимных ссылок между этими двумя файлами.

routes? Маршруты обрабатывают разные URL-адреса, поддерживаемые приложением. аргумент methods в декораторе route сообщает Flask, что эта функция просмотра принимает запросы GET и POST, переопределяя значение по умолчанию, которое должно принимать только запросы GET
Метод form.validate_on_submit() выполняет всю работу по обработке форм. Когда браузер отправляет запрос GET на получение веб-страницы с формой или если хотя бы одно поле не проходит проверку, то этот метод будет возвращать False, поэтому в этом случае функция пропускает оператор if и переходит непосредственно к отображению шаблона в последней строке функции.
декоратор @app.route создает ассоциацию между URL, указанным в качестве аргумента, и функцией. когда веб-браузер запрашивает любой из этих двух URL-адресов, Flask собирается вызвать эту функцию и передать возвращаемое значение обратно браузеру в качестве ответа.
есть динамический компонент, который обозначается как URL-компонент <username>, окруженный < и >. Когда маршрут имеет динамический компонент, Flask примет любой текст в этой части URL-адреса и вызовет функцию просмотра с фактическим текстом в качестве аргумента
db.first_or_404(), который работает как scalar() ( получить только первый результат, или None если результатов нет.) при наличии результатов, но в случае, если результатов нет, он автоматически отправляет ошибку 404 обратно клиенту


flash() - полезный способ показать сообщение пользователю

(blog.py) from app import app - Экземпляр приложения Flask называется app и является членом пакета app. Инструкция from app import app импортирует переменную app, которая является членом пакета app. Если вас это смущает, вы можете переименовать пакет или переменную во что-нибудь другое.

FLASK_APP: Команда flask run будет искать экземпляр приложения Flask в модуле, на который ссылается переменная окружения FLASK_APP (= blog.py). Поскольку переменные окружения не запоминаются во время сеансов терминала, Flask позволяет вам регистрировать переменные среды, которые вы хотите использовать автоматически при запуске flask команды. Чтобы использовать эту опцию, вам необходимо установить пакет python-dotenv.

Операция, которая преобразует шаблон в полноценную HTML-страницу, называется рендеринг. Функция render_template() вызывает движок шаблонов Jinja, который поставляется в комплекте с фреймворком Flask Framework

Flask-WTF является своего рода оболочкой, позволяющей использовать wtforms. WTForms is a flexible forms validation and rendering library for Python web development. It can work with whatever web framework and template engine you choose. It supports data validation, CSRF protection

config.py
SECRET_KEY: значение секретного ключа в качестве криптографического ключа, полезного для генерации подписей или токенов. Расширение Flask-WTF использует его для защиты веб-форм от вредоносной атаки(CSRF). Когда у меня есть конфигурационный файл, мне нужно сказать Flask, чтобы он прочитал его и применил. Это можно сделать сразу после создания экземпляра приложения Flask с помощью метода app.config.from_object(). Параметр шаблона form.hidden_tag()  генерирует скрытое поле, включающее токен, который используется для защиты формы от CSRF-атак. Все, что вам нужно сделать, чтобы защитить форму, - это включить это скрытое поле и задать SECRET_KEY
Расширение Flask-SQLAlchemy определяет местоположение базы данных приложения из переменной конфигурации SQLALCHEMY_DATABASE_URI

forms.py: типы полей импортируются непосредственно из пакета WTForms, поскольку расширение Flask-WTF не предоставляет настраиваемых версий

Шаблоны:Элемент HTML <form> используется в качестве контейнера для веб-формы. Атрибут формы action используется для указания браузеру URL-адреса, который следует использовать при отправке информации, введенной пользователем в форму. Когда для действия задана пустая строка, форма отправляется по URL, который в данный момент находится в адресной строке, то есть по URL, с помощью которого форма отображалась на странице. Атрибут method определяет метод HTTP-запроса, который следует использовать при отправке формы на сервер(POST/GET)
поля HTML из объекта form(Form) знают, как отображать себя в формате HTML. Все, что мне нужно было сделать, это включить {{ form.<field_name>.label }} там, где я хотел, метку поля, и {{ form.<field_name>() }} там, где я хотел поле.

Аргументом для url_for() является имя конечной точки, которое является именем функции просмотра.

models.py:
sqlalchemy и sqlalchemy.orm из пакета SQLAlchemy, которые предоставляют большинство элементов, необходимых для работы с базой данных. Модуль sqlalchemy включает в себя функции базы данных общего назначения и классы, такие как типы и помощники по построению запросов, в то время как sqlalchemy.orm обеспечивает поддержку использования моделей
db.Model, базовый класс для всех моделей из Flask-SQLAlchemy.
С помощью аннотаций Python полям присваивается тип, обернутый в общий тип Sqlalchemy so.Mapped. Объявление типа, такое как so.Mapped[int] или so.Mapped[str] определит тип столбца, а также указывает обязательность значения, или ненулевой в терминах базы данных. Чтобы определить столбец, который может быть пустым или обнуляемым, из Python добавлен модуль Optional , поскольку поле password_hash требует именно такую поддержку.
Магический метод __repr__ сообщает Python, как печатать объекты этого класса, что будет полезно для отладки
у модели User есть атрибут relationship posts , который был настроен с помощью универсального типа WriteOnlyMapped. Это особый тип связи, который добавляет метод select(), возвращающий запрос к базе данных для связанных элементов.

Flask-Login. Это расширение управляет состоянием входа пользователя в систему, так что, например, пользователи могут входить в приложение, а затем переходить на разные страницы, пока приложение "запоминает", что пользователь вошел в систему. Он также предоставляет функцию "запомнить меня", которая позволяет пользователям оставаться в системе даже после закрытия окна браузера.
Flask-Login предоставляет миксин-класс с именем UserMixin, который включает безопасные реализации, подходящие для большинства классов пользовательских моделей
Загрузчик пользователя зарегистрирован в системе Flask-Login с помощью декоратора @login.user_loader
четыре обязательных элемента flask-login(есть в Mixin):
is_authenticated: свойство, которое возвращает значение True если у пользователя действительные учетные данные или False в ином случае. 
is_active: свойство, которое возвращает значение, True если учетная запись пользователя активна или False в ином случае.
is_anonymous: свойство, которое возвращает False для обычных пользователей и True только для специального анонимного пользователя.
get_id(): метод, который возвращает уникальный идентификатор пользователя в виде строки.
Для реализации функции,которая заставляет пользователей входить в систему, прежде чем они смогут просматривать определенные страницы приложения, Flask-Login должен знать, что такое функция просмотра, которая обрабатывает логины

Edit_profile: когда validate_on_submit() возвращает False это может быть вызвано двумя разными причинами. Во-первых, это может быть потому, что браузер только что отправил запрос GET, на который мне нужно ответить, предоставив начальную версию шаблона формы. Это также может быть, когда браузер отправляет запрос POST с данными формы, но что-то в этих данных неверно. Для этой формы мне нужно рассматривать эти два случая отдельно. Когда форма запрашивается в первый раз с запросом GET, я хочу предварительно заполнить поля данными, которые хранятся в базе данных, поэтому мне нужно сделать обратное тому, что я сделал в случае отправки, и переместить данные, хранящиеся в полях пользователя, в форму, поскольку это гарантирует, что в этих полях формы хранятся текущие данные для пользователя. Но в случае ошибки проверки я не хочу ничего записывать в поля формы, потому что они уже были заполнены WTForms. Чтобы провести различие между этими двумя случаями, я проверяю request.method, который будет GET для первоначального запроса и POST для отправки, которая не прошла проверку.

Flask-SQLAlchemy изначально поддерживает разбивку на страницы с помощью функции db.paginate(), которая работает аналогично db.session.scalars(), но со встроенным разбиением на страницы.

Один интересный аспект функции url_for(), который я не обсуждал ранее, заключается в том, что вы можете добавить к ней любые аргументы ключевого слова, и если имена этих аргументов не являются частью URL, определенного для маршрута, то Flask включит их в качестве аргументов запроса.

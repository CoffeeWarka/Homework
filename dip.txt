Трудно представить современного человека без домашнего компьютера или смартфона в руках. Он проводит там свой досуг, занимается работой, совершает покупки - перечисление может продолжаться до бесконечности, потому что развитие технологий позволяет, по средсвам интернета, сделать практически что угодно, буквально не вставая с места.
И во всём это ему помогают безграничное количество сайтов и веб-приложений, которые, в свою очередь, стараются быть всё более полезными и понятными. И как, если не при помощи кода и фреймворков мы, программисты будущие и настоящие, можем модифицировать и упрощать жизнь простым пользователям.
Из вышесказанного следует, что программисту в текущем времени всегда есть чем себя занять и применить свои навыки в самых различных направлениях. Начиная от разработки приложений "для себя" (ежедневников, блогов, счётчиков всего подряд) и заканчивая серьезными, если не сказать, глобальными задачами, такие как сбор данных или обработка тысяч и миллионов строк продукции.
Современные компании всегда ищут более быстрые и эффективные пути взаимодействия с потребителем, ищут новые способы автоматизации и увеличения выгоды с чем, безусловно, им помагает интернет.
Для меня же, как для начинающего программиста, работа с фреймворками является основополагающим навыком, с развитием которого, я и сам смогу придумывать, разрабатывать и реализовывать эффективные и, вполне возможно, никем раньше невиданные приложения, которыми смогут пользоваться люди по всему миру. Рост и прогрессирование в этом направлении очень привлекает меня и я с надеждой смотрю в наше компьютеризированное будущее, от которого не только не сбежать, но и, на самом деле, очень полезно дружить и идти в ногу.
Исходя из этих тезисов, можно понять, что я крайне заинтересован в анализе и сравнении написания веб-приложений с использованием разных фреймворков.

Цель исследования: разработка простых приложений с использованием фреймворков Django, Flask и FastAPI

Задачи исследования:  Обзор фреймворков для написания веб-приложений. 
Сравнение эффективности фреймворков: сложность реализации, эффективность работы самого фреймворка, взаимодействие со сторонними пакетами и базами данных.
Реализация веб-приложений на которых можно будет проверить функционал, эффективность, плюсы и минусы каждого фреймворка
Написание дипломной работы: составление дипломной работы, включающей в себя введение, обзор фреймворков, обзор приложений, сравнение фреймворков на базе этих приложений, анализ результатов и выводы
Результаты исследования позволят оценить слабые и сильные стороны фреймворков, область их применения, а также относительную взаимозаменяемость в тех или иных случаях

Основные понятия и определения:
Фреймворк(Framework):
набор готовых инструментов, библиотек и функций, которые упрощают разработку программного обеспечения. Он предоставляет разработчикам готовые решения для типичных задач, таких как работа с базами данных, веб-серверами, аутентификацией пользователей и т. д.
Среди самых популярных фреймворков находятся обозреваемые мной Django, Flask и FastAPI.

Веб-приложение(Web Application):
программа, которая работает через интернет-браузер и предоставляет пользователю определённые функции и услуги. Оно не требует установки на компьютер или мобильное устройство, поскольку все вычисления происходят на сервере, а пользователь получает только результат работы программы.
При помощи вебприложений написаных на основе различных фреймворков и будет проводиться аннализ последних в данной работе

ORM (Object-Relational Mapping):
технология программирования, которая позволяет работать с реляционными базами данных, используя объектно-ориентированный подход. 
Основные функции ORM:
Отображение объектов на таблицы базы данных.
Преобразование запросов к базе данных в вызовы методов объектов.
Управление транзакциями и изменениями данных.

Миграции(Migrations)
процесс изменения структуры базы данных без потери данных. Они используются для отслеживания и применения изменений в схеме базы данных, таких как добавление, удаление или изменение таблиц и столбцов.

Маршрутизация:
процесс направления запросов к определённым функциям или методам в зависимости от заданных правил. Маршрутизация позволяет разработчикам организовать код и упростить его понимание, а также обеспечивает гибкость при обработке запросов.

API (Application Programming Interface):
набор определений и протоколов для создания и интеграции программного обеспечения. API позволяет разработчикам получать доступ к определённым функциям и данным другого приложения или сервиса, что упрощает разработку и обеспечивает стандартизированный способ взаимодействия между различными системами.

URL

Декораторы

HTML

Описание фреймворков:

Общие положения по фреймворкам:
Упрощение разработки. Фреймворки предоставляют готовые инструменты для выполнения типичных задач. Это ускоряет процесс разработки и уменьшает вероятность ошибок.
Повышение качества кода. Фреймворки следуют определённым стандартам и лучшим практикам, что помогает разработчикам писать более чистый и понятный код.
Масштабируемость. Фреймворки легко масштабируются, что позволяет разработчикам добавлять новые функции и поддерживать большие проекты.
Сообщество и поддержка. Фреймворки имеют большое сообщество разработчиков, которые создают плагины, расширения и документацию. Это облегчает поиск решений и поддержку.
Безопасность. Фреймворки часто включают в себя функции безопасности, такие как аутентификация, авторизация и защита от атак.
Тестирование. Фреймворки упрощают тестирование кода, предоставляя инструменты для написания тестов и проверки функциональности.

Django:
бесплатный и открытый веб-фреймворк, который позволяет создавать надёжные и масштабируемые веб-сайты. Он предоставляет разработчикам инструменты для быстрого создания динамических веб-приложений с использованием готовых компонентов и библиотек.

Flask:
микрофреймворк для создания веб-приложений. Он предоставляет базовые функции и инструменты, необходимые для разработки веб-сайтов и приложений, но не включает в себя множество дополнительных функций, которые есть в более крупных фреймворках.

FastAPI:
современный веб-фреймворк для создания API, использующий декораторы, аннотации типов и интроспекцию кода, что позволяет уменьшить количество шаблонного кода в веб-приложении.

Веб-приложения на разных фреймворках

Общие положения:
Установка пакетов:
В python пакеты, такие как Django, Flask, FastAPI  многие другие доступны в общедоступном репозитории, откуда любой может их скачать и установить. Официальный репозиторий пакетов называется PyPI (Python Package Index). Устанавливать пакеты из PyPI просто, так как Python поставляется с инструментом под названием pip в комплекте.
При помощи команды pip install нужный пакет загружается, устанавливается и с этого момента каждый скрипт Pyton имеет к нему доступ. 
Дабы избежать конфликтов, например, связанных с различными версиями инструментария, на котором было написано ваше веб-приложение (работало на старой версии, но полностью сломалось на новой и т.п.) существуют виртуальные среды. Виртуальная среда - это полная копия интерпретатора Python, изолированная от основного, что делает её идеальной площадкой для экспериментов без страха затронуть работоспособность ваших старых приложений и инструментария (часто новые версии пакетов плохо взаимодействуют со старыми, особенно в первое время после релиза)
Создав новое виртуальное окружение, активировав его и установив в него все необходимые пакеты я приступаю к написанию веб приложений:

Flask:
в качестве образца для анализа я выбрал веб-приложение в виде небольшого блога, которое имеет страницы входа, регистрации, отображения профиля и написанных сообщений мной или, образными, другими пользователями.
В папке приложения, в файле __init__.py, который показывает Python, что подкаталог считается пакетом и может быть импортирован есть одна особенность , которая позволяет избежать циклического импорта, распространенной проблемы приложений с использованием Flask: импортирование модулей внизу файла, после всего написанного кода. Так как модулю routes необходимо импортировать переменную app, но у нас уже есть пакет под названием app, расположение импорта внизу позволяет избежать ошибки, возникающей в результате взаимных ссылок между этими двумя этими файлами.
В модуле routes находятся функции, которые являются обработчиками маршрутов разных URL-адресов. Они показывают, какую логику следует выполнять Flask в моменты обращения клиента к указанному URL.
Функции в этом модуле обёрнуты в декораторы, дабы создать связь между ними и URL, указанным в качестве аргумента (при запросе адреса, вызывается декорируемая фунция).
Перед запуском приложения, чтобы Flask знал, как его импортировать, устанавливаем переменную среды FLASK-APP. Для упрощения работы и автоматического её использования , существует пакет python-dotenv для регистрации FLASK-APP. В файл .flaskenv записывается FLASK-APP=blog.py (blog.py - название файла, которое определяет экземляр приложения)
Запускается приложение Flask командой flask run. Команда настраивает веб-сервер, который пересылает запросы приложению, указанному в FLASK-APP
